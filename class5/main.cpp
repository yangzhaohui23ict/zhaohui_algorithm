#include <iostream>

using namespace std;




/**

    链表问题说明：绘制结构的时候，千万一定，要画上节点，不要只划线想结构

    函数整体内容：

        1.生成链表

        2.生成有环链表

        3.判断一个链表有没有环结构，如果有，返回第一个入环节点。

            思路：

                简单的：使用额外的数据结构，用一个set来记录

                难的：快慢指针：

                    原理：

                        快指针如果走到了空，说明没有环结构

                        如果快慢指针相遇了，那么说明这个链表有环结构，并且，这个环结构不会被快慢节点走太多。两圈之内，一定相遇。

                        （重点！！！！！）

                        如果快慢指针相遇了，快指针回到开头，慢指针不动，之后两个节点每一次都只有一步，接下来，两个指针会在入环节点处相遇。



        4.对于两个链表相交的结构，不知道链表是否有环结构，请给出相交节点。

            思路：

                首先，check一下两个链表是否有环

                如果，都没有环结构，那么如果相交，那么节点之后部分一定是共有的。

                    如果这样的话，我们遍历两个链表，记录长度以及最后一个节点的位置就可以了，如果两个链表的最后位置一样，就相交，反之一定不相交

                    如果最后链表位置一样，那么长节点先走长度差值个节点，然后两个节点一起走，一定在第一个相交节点相遇，返回这个节点。

                如果，一个有环，而另一个没有环呢？

                    这种情况，毫无疑问，一定不相交。

                如果，两个链表都有环。

                    这里的前提，我们的问题3这里，给出的返回值是包含有了对应的入环节点了的。

                    分三个情况：

                        完全分开，井水不犯河水。

                            得到两个入环节点，跑其中一个，如果跑完了，发现还没有找到另外一个，那就是这个情况

                        共用一个环结构，但是入环节点是一样的。

                            这个最好办，就是那入环节点做结束，然后和没有环一样

                        共用一个环结构，但是入环节点不一样。

                            得到两个入环节点，跑其中一个，如果发现撞上了另一个入环节点，那就是这个情况

**/




int main()
{
    cout << "Hello world!" << endl;
    return 0;
}
